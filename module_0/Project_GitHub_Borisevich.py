#!/usr/bin/env python
# coding: utf-8

# In[22]:


import numpy as np

number = np.random.randint(1,101)    # загадали число
print ("Загадано число от 1 до 100")


def game_core(number):
    '''Данная функция принимает загаданное число и возвращает число попыток,
    потребовавшихся для отгадывания.'''
    #Для достижения наименьшего количества попыток используется принцип
    #бинарного поиска.На первом шаге мы делим массив пополам (100/2 = 50) и предполагаем, 
    #что наше число равно 50. Если загаданное число больше предполагаемого, 
    #то мы добавляем к нему половину от осташегося массива(50/2 =25),если 
    #меньше, то вычитаем. Шаг будет следующим 50-25-12-6-3. После того, 
    #как шаг стал равен 3, нам остается лишь перебрать значения по очереди, с шагом 1.
    
    predict = 50    # предполагаемое число
    step = 50    # шаг, который мы будем изменять
    count = 0    # количество попыток
    while True:   # цикл выполняется, пока не отгадаем число
        count += 1    # добавляем попытку
        
        if number == predict:    # выход из цикла, если угадали число
            break 
        
        if count >= 5:    # после четвертой попытки, изменяем шаг цикла на 1
            step = 2
        step = step // 2    # изменяем шаг
        
        if number > predict:    # если загаданное число больше, то прибавляем шаг
            predict += step
        elif number < predict:    # если загаданное число меньше, то вычитаем шаг
            predict -= step
            
    return(count)    # возвращаем количество попыток
     
    
def score_game(game_core):
    '''Функция запускает игру 1000 раз, чтобы узнать, как быстро игра угадывает число,
    и выводит среднее количество попыток'''
    count_ls = []    # создаем пустой список, куда будут добавляться наши попытки
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы эксперимент был воспроизводим!
    random_array = np.random.randint(1,101, size=(1000))
    
    for number in random_array:
        count_ls.append(game_core(number))
    score = int(round(np.mean(count_ls)))   # в примере на платформе, округление идет в меньшую сторону
    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    print(count_ls)    # выводим список со всеми попытками
    
    return(score)


# In[23]:


score_game(game_core)


# In[ ]:




